@page
@using Korki.Models;
@using Korki.Data;
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@model Korki.Pages.TutorOfferModel
@{
    ViewData["Title"] = "Oferta: " + Model.Tutor.DisplayName;
}
@section Styles{
    <link rel="stylesheet" href="~/css/tutor_offer.css" />
}

<div class="tutor_offer_wrapper">
    @if (Model.Tutor == null)
    {
        <h2>Profil nie istnieje.</h2>
        <p>Coś poszło nie tak. Z reguły dzieje się tak, gdy adres url do strony korepetytora jest nieprawidłowy, bądź profil został usunięty.</p>
    }
    else
    {
        <h2>@Model.Tutor.DisplayName</h2>
        <div class="full_flex_row">
            <p class="tutor_desc">@Model.Tutor.Desc</p>
            <div class="tutor_info_box">
                <div class="tutor_info_box_row">
                    <span>Udziela korepetycji w:</span>
                    <span>@Model.Tutor.CityName @((Model.Tutor.ProvidesNearCity) ? "i okolice (+" + Model.Tutor.RangeIncrement + ")"  : "")</span>
                </div>
                <p>Przedmioty:</p>
                <ul class="offer_subject_list">
                    @foreach (string key in Model.Tutor.Subjects.Keys)
                    {
                        <li>@key, poziom @Model.GetLevelStr(key)</li>
                    }
                </ul>
                <div class="tutor_info_box_row">
                    <span>Cena za sesję:</span>
                    <span>@Model.Tutor.PriceText</span>
                </div>
                <p>Dodatkowe informacje:</p>
                <p>@Model.Tutor.BonusInfo</p>
            </div>
        </div>
        <div class="full_flex_row">
            <table class="tutor_timetable">
                <tr>
                    @foreach (DateTime date in Model.Timetable.AvailableDates.Keys)
                    {
                        <th>@ConstantTexts.GetDayOfWeekName(date.DayOfWeek) + " " + date.Date.ToString("dd.MM.yyyy")</th>
                    }
                </tr>
                <tr>
                    @foreach (DateTime date in Model.Timetable.AvailableDates.Keys)
	                {
		                <td>
                            @foreach (DateTime preciseTime in Model.Timetable.AvailableDates[date])
	                        {
		                        <div class="timetable_time">@preciseTime.ToString("HH:mm")</div>
	                        }
                        </td>
	                }
                </tr>
            </table>
        </div>
        <div class="full_flex_row">
            <h4>Oceny:</h4>
            <div class="rating_widget">
                <button class="rating_button"></button>
                <button class="rating_button"></button>
                <button class="rating_button"></button>
                <button class="rating_button"></button>
                <button class="rating_button"></button>
                @if (Model.Tutor.RatingCount >= Tutor.MinRatingCount)
                {
                    <span>@Model.Tutor.RatingAvgStr/5 z @Model.Tutor.RatingCount ocen</span>
                }
                else
                {
                    <span>@ConstantTexts.NotEnoughRatings</span>
                }
            </div>
        </div>
        @if (!SignInManager.IsSignedIn(User))
        {
            <p class="rating_notice">Tylko zalogowani użytkownicy mogą wystawiać oceny.</p>
        }
    }

</div>